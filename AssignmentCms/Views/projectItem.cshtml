@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.ProjectItem>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@{
	Layout = "childPageLayout.cshtml";
    ViewBag.Title = Model?.Value("pageTitle");
    var projects = Umbraco.Content(Guid.Parse("88f70064-0848-45eb-a997-81295849fe02"))
        .ChildrenOfType("projectItem")
        .Where(x => x.IsVisible());
}

<section class="spacing-top spacing-bottom">
    <div class="container project-details">
        <div class="page-content">
            @Model.Value("projectContent")

            @if(Model.ProjectTags.Any()){
            <div class="tag-wrapper">
                <span class="slide">Tags</span>
                @foreach(var tag in Model.ProjectTags){
                    <span class="tag bg-accent">@tag</span>
                }
            </div>
        }
        </div>
        <aside class="aside aside-position-right">

            <h5 class="h5">Recent projects</h5>
            <div class="recent-projects-wrapper">

            @foreach (var item in projects)
            {
                var image = item.Value<IPublishedContent>("projectThumbnail")?.Url() ?? "";
                var projectDate = item.Value<DateTime>("projectDate");
                
                <a class="link" href="@item.Url()">
                    <article class="recent-project-item">
                        <div class="item1">

                        <img src="@image" alt="" class="recent-project-image" />
                        </div>
                        <h6 class="subtitle3 item2">@item.Name()</h6>
                        <p class="body item3">@projectDate.ToString("dd MMMM yyyy")</p>
                    </article>	
                </a>
            }
            </div>


            @await Html.PartialAsync("partials/static/projectTags.cshtml")

            @await Html.PartialAsync("partials/static/helpFormSmall.cshtml")
        
        </aside>
    </div>
</section>

@await Html.GetBlockGridHtmlAsync(Model.PageLayout)